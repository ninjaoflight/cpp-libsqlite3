# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

image: archlinux:latest


cache:
  key: "$CI_JOB_NAME"
  paths:
    - /var/cache/pacman/pkg


stages:          # List of stages for jobs, and their order of execution
  - setup
  - build
  - test
  - deploy

config-job:
  stage: setup
  script:
    - pacman -Syu --noconfirm meson ninja clang catch2 git util-linux-libs pkgconf
    - meson builddir -Dbuild_tests=true -Db_coverage=true
  artifacts:
    expire_in: 1 hour
    paths:
      - builddir
      - subprojects

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  dependencies:
    - config-job
  script:
    - pacman -Syu --noconfirm meson ninja clang catch2 util-linux-libs pkgconf
    - meson compile -C builddir
  artifacts:
    expire_in: 1 hour
    paths:
      - builddir
      - subprojects

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  dependencies:
    - build-job
  script:
    - pacman -Syu --noconfirm meson clang
    - cd builddir 
    - ./test/testexe --reporter junit > meson-logs/testlog.junit.xml
  artifacts:
    when: always
    expire_in: 1 hour
    paths:
      - builddir
    reports:
      junit:
        - builddir/meson-logs/testlog.junit.xml

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  dependencies:
    - build-job
  script:
    - pacman -Syu --noconfirm meson ninja clang perl util-linux-libs pkgconf
    - cd builddir
    - ninja scan-build

test-coverage-job:
  stage: test
  dependencies:
    - build-job
  script:
    - pacman -Syu --noconfirm gcovr ninja meson
    - ninja coverage-xml -C builddir
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 2 days
    reports:
      cobertura: builddir/meson-logs/coverage.xml


deploy-job source:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  dependencies:
    - unit-test-job
  script:
    - pacman -Syu --noconfirm meson ninja git
    - cd builddir
    - meson dist --no-tests


